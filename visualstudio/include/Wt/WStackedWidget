// This may look like C code, but it's really -*- C++ -*-
/*
 * Copyright (C) 2008 Emweb bvba, Kessel-Lo, Belgium.
 *
 * See the LICENSE file for terms of use.
 */
#ifndef WSTACKEDWIDGET_H_
#define WSTACKEDWIDGET_H_

#include <Wt/WContainerWidget>

namespace Wt {

/*! \class WStackedWidget Wt/WStackedWidget Wt/WStackedWidget
 *  \brief A container widget that stacks its widgets on top of each
 *         other.
 *
 * This is a container widgets which at all times has only one item
 * visible. The widget accomplishes this using setHidden(bool) on the
 * children.
 *
 * Using currentIndex() and setCurrentIndex(int index) you can
 * retrieve or set the visible widget.
 *
 * %WStackedWidget, like WContainerWidget, is by default not inline.
 *
 * <h3>CSS</h3>
 *
 * The widget is rendered using an HTML <tt>&lt;div&gt;</tt> tag and
 * does not provide styling. It can be styled using inline or external
 * CSS as appropriate.
 *
 * \sa WMenu
 */
class WT_API WStackedWidget : public WContainerWidget
{
public:
  /*! \brief Created a new stacked container widget.
   */
  WStackedWidget(WContainerWidget *parent = 0);

  virtual void addWidget(WWidget *widget);

  /*! \brief Returns the index of the widget that is currently shown.
   *
   * \sa setCurrentIndex(), currentWidget()
   */
  int currentIndex() const;

  /*! \brief Returns the widget that is currently shown.
   *
   * \sa setCurrentWidget(), currentIndex()
   */
  WWidget *currentWidget() const;

  /*! \brief Insert a widget at a given index
   */
  void insertWidget(int index, WWidget *widget);

  /*! \brief Shows a particular widget.
   *
   * The widget with index \p index is made visible, while all other
   * widgets are invisible.
   *
   * \sa currentIndex(), setCurrentWidget()
   */
  void setCurrentIndex(int index);

  /*! \brief Shows a particular widget.
   *
   * The widget \p widget, which must have been added before, is
   * made visible, while all other widgets are invisible.
   *
   * \sa currentWidget(), setCurrentIndex()
   */
  void setCurrentWidget(WWidget *widget);

protected:
  virtual void removeChild(WWidget *child);
  virtual DomElement *createDomElement(WApplication *app);
  virtual void        getDomChanges(std::vector<DomElement *>& result,
				    WApplication *app);

private:
  int currentIndex_;
};

}

#endif // WSTACKEDWIDGET_H_
