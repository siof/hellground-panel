/*
*    HG Players Panel - web panel for HellGround server Players
*    Copyright (C) 2011 HellGround Team : Siof, lukaasm,
*
*    This program is free software: you can redistribute it and/or modify
*    it under the terms of the GNU Affero General Public License as
*    published by the Free Software Foundation, either version 3 of the
*    License, or (at your option) any later version.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU Affero General Public License for more details.
*
*    You should have received a copy of the GNU Affero General Public License
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef DEFINES_H_INCLUDED
#define DEFINES_H_INCLUDED

// standard includes for most files
#include <WString>
#include <WBreak>
#include <WContainerWidget>
#include <WLineEdit>
#include <WPushButton>
#include <WText>
#include <WImage>
#include <WTable>

#include <cstdio>
#include <map>

using namespace Wt;

typedef uint64_t uint64;
typedef uint32_t uint32;

#define SHOW_MYSQL_ERRORS

//#define DEBUG

#ifdef DEBUG
#include <iostream>
#endif

#define SITE_TITLE  "HellGround Player's Panel"

#define SITE_NAME   "HellGround"

#define SQL_HOST        ""
#define SQL_LOGIN       ""
#define SQL_PASSWORD    ""
#define SQL_PORT        3060

#define PANEL_SQL_HOST  ""
#define PANEL_SQL_LOGIN ""
#define PANEL_SQL_PASS  ""
#define PANEL_SQL_PORT  3060

#define SQL_REALMDB     ""
#define SQL_CHARDB      ""
#define SQL_WORLDDB     ""
#define SQL_PANELDB     "panel"

enum Lang
{
    LANG_PL = 0,
    LANG_EN,

    LANG_COUNT
};

enum AccountLevel
{
    LVL_PLAYER      = 0,
    LVL_GM_TRIAL    = 1,
    LVL_GM_HELPER   = 2,
    LVL_GM_HEAD     = 3,
    LVL_ADM         = 4
};

struct Text
{
    Text() : textId(0) {}
    Text(uint32 id) : textId(id) {}
    ~Text() {}

    WString GetText(Lang lang)
    {
        return texts[lang].toUTF8();
    }

    uint32 textId;
    WString texts[LANG_COUNT];
};

struct SessionInfo
{
    SessionInfo() : login(""), accid(0), pass(""), email(""), language(LANG_PL), accLvl(LVL_PLAYER) {}
    ~SessionInfo() {}

    WString login;
    uint64 accid;
    WString pass;
    WString email;
    WString joinDate;
    WString lastLogin;
    WString lastIp;
    Lang language;
    AccountLevel accLvl;
    std::map<uint32 ,Text> langTexts;
    bool locked;
    int expansion;

    WString GetText(uint32 id)
    {
        std::map<uint32, Text>::iterator itr = langTexts.find(id);

        if (itr == langTexts.end())
            return WString("Error ! Text missing !");

        return itr->second.GetText(language);
    }
};

enum Errors
{
    ERROR_DB_CONNECT    = 0,
    ERROR_LOGIN         = 1,
    ERROR_ROW_NOT_FOUND = 2
};

enum Texts
{
    // Menu buttons
    TXT_MENU_HOME                   = 0,
    TXT_MENU_LOGIN                  = 1,
    TXT_MENU_LOGOUT                 = 2,
    TXT_MENU_REGISTER               = 3,
    TXT_MENU_PASS_RECOVERY          = 4,
    TXT_MENU_PASS_CHANGE            = 5,
    TXT_MENU_ACC_INFO               = 6,
    TXT_MENU_SERVER_STATUS          = 7,
    TXT_MENU_DONATE                 = 8,
    TXT_MENU_VOTE                   = 9,
    TXT_MENU_LINKS                  = 10,
    TXT_MENU_TELEPORT               = 11,
    TXT_MENU_IP_BLOCK               = 12,
    TXT_MENU_BANINFO                = 13,
    TXT_MENU_BANLIST                = 14,
    TXT_MENU_MUTEINFO               = 15,
    TXT_MENU_MUTELIST               = 16,

    TXT_MENU_GM_PANEL               = 50,
    TXT_MENU_GM_TICKETS             = 51,
    TXT_MENU_GM_ONLINE              = 52,
    TXT_MENU_GM_FACTION             = 53,

    // Static labels
    TXT_LBL_CHAR_NAME               = 75,
    TXT_LBL_CHAR_LVL                = 76,
    TXT_LBL_CHAR_CLASS              = 77,
    TXT_LBL_CHAR_TOTAL_PLAYED       = 78,
    TXT_LBL_CHAR_LVL_PLAYED         = 79,

    TXT_LBL_ACC_CHARS               = 100,
    TXT_LBL_ACC_CREATE_DATE         = 101,
    TXT_LBL_ACC_LAST_LOGIN          = 102,
    TXT_LBL_ACC_LAST_IP             = 103,
    TXT_LBL_ACC_IP_BLOCK            = 104,
    TXT_LBL_ACC_BAN                 = 105,
    TXT_LBL_ACC_ONLINE              = 106,
    TXT_LBL_ACC_VP                  = 107,
    TXT_LBL_ACC_EXPANSION           = 108,
    TXT_LBL_ACC_CLIENT_VERSION      = 109,
    TXT_LBL_ACC_MULTIACC            = 110,
    TXT_LBL_ACC_LAST_PASS_RECOVERY  = 111,
    TXT_LBL_ACC_LOGIN               = 112,
    TXT_LBL_ACC_MAIL                = 113,
    TXT_LBL_ACC_GG                  = 114,

    TXT_LBL_PASS_CHANGE             = 130,
    TXT_LBL_PASS_OLD                = 131,
    TXT_LBL_PASS_NEW                = 132,
    TXT_LBL_PASS_REPEAT             = 133,
    TXT_LBL_PASS_RECOVERY           = 134,
    TXT_LBL_PASS_MAIL               = 135,
    TXT_LBL_PASS_GG                 = 136,

    TXT_LBL_INSTANCE_OPEN           = 150,
    TXT_LBL_INSTANCE_CLOSED         = 151,

    TXT_LBL_REGISTER_RULES          = 155,
    TXT_LBL_REGISTER_RULES_ACCEPT   = 156,

    TXT_LBL_BAN_LOGIN               = 160,
    TXT_LBL_BAN_FROM                = 161,
    TXT_LBL_BAN_TO                  = 162,
    TXT_LBL_BAN_BY                  = 163,
    TXT_LBL_BAN_REASON              = 164,
    TXT_LBL_BAN_ACTIVE              = 165,

    // Button labels
    TXT_BTN_PASS_CHANGE             = 200,
    TXT_BTN_PASS_CLEAR              = 201,
    TXT_BTN_PASS_SEND               = 202,
    TXT_BTN_LOGIN                   = 203,
    TXT_BTN_REGISTER                = 204,
    TXT_BTN_TELEPORT                = 205,
    TXT_BTN_BANNED_ACC              = 206,
    TXT_BTN_BANNED_IP               = 207,

    // Other
    TXT_SITE_TITLE                  = 225,
    TXT_SITE_FOOTER                 = 226,
    TXT_SERVER_INFO                 = 227,
    TXT_TELEPORT                    = 228,
    TXT_IP_BLOCK_ON                 = 229,
    TXT_IP_BLOCK_OFF                = 230,
    TXT_BAN                         = 231,
    TXT_INSTANCES                   = 232,
};

/*
FILE *email= popen ("/usr/lib/sendmail", "wb");

fprintf (email, "To: john@foo.com\r\n" );
fprintf (email, "From: james@foo.com\r\n" );
fprintf (email, "\r\n" );
fprintf (email, "Hello!\r\n" );

pclose (email);
*/

#endif // DEFINES_H_INCLUDED
